name: Drift-Detection-Pipeline1
trigger: none

pool: self_hosted_tushar

parameters:
  - name: Environment
    displayName: Environment
    type: string
    default: dev
    values:
      - dev
      - Pre_prod

variables:
  work_dir: '$(System.DefaultWorkingDirectory)/01.Modules'
  appFolder: '$(System.DefaultWorkingDirectory)/01.Modules'
  planOutputFile: 'tfplan.binary'
  driftReportFile: 'drift.txt'
  htmlReportFile: 'drift-summary.html'
  reports_dir: '$(Build.ArtifactStagingDirectory)/drift-reports'

stages:

# Stage 1: Drift Detection
- stage: DriftDetection
  displayName: "Terraform Drift Detection"
  jobs:
  - job: DetectDrift
    displayName: "Detect Drift in Infra"
    pool: self_hosted_tushar
    steps:
      - checkout: self

      # Terraform Init
      - task: TerraformTaskV4@4
        displayName: Terraform Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(work_dir)'
          backendServiceArm: 'tushar_sc_new1'
          backendAzureRmResourceGroupName: 'Tushar_Backend'
          backendAzureRmStorageAccountName: 'ppipestoragetu491'
          backendAzureRmContainerName: 'ppipecontainer'
          backendAzureRmKey: '${{parameters.Environment}}.terraform.tfstate'
      - task: TerraformTaskV4@4
        displayName: Terraform Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(work_dir)'
          commandOptions: '-var-file=${{parameters.Environment}}.terraform.tfvars -out=$(planOutputFile)'
          environmentServiceNameAzureRM: 'tushar_sc_new1'
      - task: PowerShell@2
        displayName: "Check for Drift & Generate Dashboard"
        name: CheckDrift
        inputs:
          filePath: '.azure_pipelines.yaml/scripts/CheckDrift.ps1'
          arguments: '-AppFolder "$(appFolder)" -PlanOutputFile "$(planOutputFile)" -ReportsDir "$(reports_dir)" -DriftReportFile "$(driftReportFile)" -HtmlReportFile "$(htmlReportFile)"'
          pwsh: false



      # Terraform Plan with Detailed Exit Code
      - task: PowerShell@2
        displayName: "Terraform Plan & Detect Drift"
        name: TerraformPlanTask
        inputs:
          targetType: 'inline'
          script: |
            $workDir = "$(work_dir)"
            $planOutput = Join-Path $workDir "$(planOutputFile)"
            $envName = "${{parameters.Environment}}"
            cd $workDir

            # Run terraform plan with detailed exit code
            terraform plan -var-file="$envName.terraform.tfvars" -out=$planOutput -detailed-exitcode
            $exitCode = $LASTEXITCODE
            Write-Host "Terraform plan exit code: $exitCode"

            # Check if plan file exists
            if (-Not (Test-Path $planOutput)) {
                Write-Warning "Terraform plan file not found. Treating as no drift."
                Write-Host "##vso[task.setvariable variable=DriftDetected;isOutput=true]false"
            } else {
                # Determine drift based on exit code
                if ($exitCode -eq 2) {
                    Write-Host "Drift detected."
                    Write-Host "##vso[task.setvariable variable=DriftDetected;isOutput=true]true"
                } elseif ($exitCode -eq 0) {
                    Write-Host "No drift detected."
                    Write-Host "##vso[task.setvariable variable=DriftDetected;isOutput=true]false"
                } elseif ($exitCode -eq 1) {
                    Write-Error "Terraform plan failed"
                    exit 1
                } else {
                    Write-Error "Unexpected terraform exit code: $exitCode"
                    exit $exitCode
                }
            }

            # Generate Drift Reports if plan exists
            $driftReportDir = "$(reports_dir)"
            if (-not (Test-Path $driftReportDir)) { New-Item -ItemType Directory -Path $driftReportDir | Out-Null }

            $scriptPath = "$(Build.SourcesDirectory)\.azure_pipelines.yaml\scripts\CheckDrift.ps1"
            if ((Test-Path $scriptPath) -and (Test-Path $planOutput)) {
                & $scriptPath `
                  -AppFolder "$(appFolder)" `
                  -PlanOutputFile $planOutput `
                  -ReportsDir $driftReportDir `
                  -DriftReportFile "$(driftReportFile)" `
                  -HtmlReportFile "$(htmlReportFile)"
            } else {
                Write-Warning "Either CheckDrift.ps1 not found or plan file missing. Skipping dashboard generation."
            }
          pwsh: false

      # Publish Drift Reports
      - task: PublishBuildArtifacts@1
        displayName: "Publish Drift Report"
        condition: always()
        inputs:
          PathtoPublish: '$(reports_dir)'
          ArtifactName: 'drift-reports'
          publishLocation: 'Container'

# Stage 2: Manual Approval (Only if drift detected)
- stage: ManualApproval
  displayName: "Manual Approval for Apply"
  dependsOn: DriftDetection
  condition: eq(dependencies.DriftDetection.outputs['DetectDrift.TerraformPlanTask.DriftDetected'], 'true')

  jobs:
  - job: WaitForApproval
    displayName: "Manual Approval"
    pool: server
    steps:
      - task: ManualValidation@0
        inputs:
          notifyUsers: 'tusharupase786@gmail.com'
          instructions: 'Terraform drift detected! Review the report before applying changes.'

# Stage 3: Apply Terraform Changes (Only if drift detected and approved)
- stage: ApplyChanges
  displayName: "Terraform Apply"
  dependsOn:
    - DriftDetection
    - ManualApproval
  condition: and(succeeded('ManualApproval'), eq(dependencies.DriftDetection.outputs['DetectDrift.TerraformPlanTask.DriftDetected'], 'true'))
  jobs:
  - job: ApplyDrift
    displayName: "Apply Drift"
    pool: self_hosted_tushar
    steps:
      # Terraform Re-Init
      - task: TerraformTaskV4@4
        displayName: Terraform Re-Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(work_dir)'
          backendServiceArm: 'tushar_sc_new1'
          backendAzureRmResourceGroupName: 'Tushar_Backend'
          backendAzureRmStorageAccountName: 'ppipestoragetu491'
          backendAzureRmContainerName: 'ppipecontainer'
          backendAzureRmKey: '${{parameters.Environment}}.terraform.tfstate'

      # Terraform Apply
      - task: TerraformTaskV4@4
        displayName: Terraform Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(work_dir)'
          commandOptions: '--var-file=${{parameters.Environment}}.terraform.tfvars'
          environmentServiceNameAzureRM: 'tushar_sc_new1'